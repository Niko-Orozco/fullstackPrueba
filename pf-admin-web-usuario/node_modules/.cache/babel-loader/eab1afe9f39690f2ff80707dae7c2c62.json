{"ast":null,"code":"import * as React from 'react';\nimport { CSSTransition as CSSTransition$1 } from 'react-transition-group';\nimport PrimeReact from 'primereact/api';\nimport { useUpdateEffect } from 'primereact/hooks';\nimport { ObjectUtils } from 'primereact/utils';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar CSSTransition = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var disabled = props.disabled || props.options && props.options.disabled || !PrimeReact.cssTransition;\n\n  var onEnter = function onEnter(node, isAppearing) {\n    props.onEnter && props.onEnter(node, isAppearing); // component\n\n    props.options && props.options.onEnter && props.options.onEnter(node, isAppearing); // user option\n  };\n\n  var onEntering = function onEntering(node, isAppearing) {\n    props.onEntering && props.onEntering(node, isAppearing); // component\n\n    props.options && props.options.onEntering && props.options.onEntering(node, isAppearing); // user option\n  };\n\n  var onEntered = function onEntered(node, isAppearing) {\n    props.onEntered && props.onEntered(node, isAppearing); // component\n\n    props.options && props.options.onEntered && props.options.onEntered(node, isAppearing); // user option\n  };\n\n  var onExit = function onExit(node) {\n    props.onExit && props.onExit(node); // component\n\n    props.options && props.options.onExit && props.options.onExit(node); // user option\n  };\n\n  var onExiting = function onExiting(node) {\n    props.onExiting && props.onExiting(node); // component\n\n    props.options && props.options.onExiting && props.options.onExiting(node); // user option\n  };\n\n  var onExited = function onExited(node) {\n    props.onExited && props.onExited(node); // component\n\n    props.options && props.options.onExited && props.options.onExited(node); // user option\n  };\n\n  useUpdateEffect(function () {\n    if (disabled) {\n      // no animation\n      var node = ObjectUtils.getRefElement(props.nodeRef);\n\n      if (props[\"in\"]) {\n        onEnter(node, true);\n        onEntering(node, true);\n        onEntered(node, true);\n      } else {\n        onExit(node);\n        onExiting(node);\n        onExited(node);\n      }\n    }\n  }, [props[\"in\"]]);\n\n  if (disabled) {\n    return props[\"in\"] ? props.children : null;\n  } else {\n    var immutableProps = {\n      nodeRef: props.nodeRef,\n      \"in\": props[\"in\"],\n      onEnter: onEnter,\n      onEntering: onEntering,\n      onEntered: onEntered,\n      onExit: onExit,\n      onExiting: onExiting,\n      onExited: onExited\n    };\n    var mutableProps = {\n      classNames: props.classNames,\n      timeout: props.timeout,\n      unmountOnExit: props.unmountOnExit\n    };\n\n    var mergedProps = _objectSpread(_objectSpread(_objectSpread({}, mutableProps), props.options || {}), immutableProps);\n\n    return /*#__PURE__*/React.createElement(CSSTransition$1, mergedProps, props.children);\n  }\n});\nCSSTransition.displayName = 'CSSTransition';\nCSSTransition.defaultProps = {\n  __TYPE: 'CSSTransition'\n};\nexport { CSSTransition };","map":null,"metadata":{},"sourceType":"module"}